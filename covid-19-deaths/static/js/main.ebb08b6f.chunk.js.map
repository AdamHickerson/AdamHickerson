{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","jurisdiction","hideRecentWeeks","method","jurisdictions","Object","keys","deaths","sort","splice","indexOf","unshift","datasets","year","color","lineWidth","this","dash","recentHideApplies","fill","dataspec","reshape_data","week","push","x","y","label","showLine","pointRadius","tension","borderColor","borderWidth","borderDash","hidden","data","labels","Container","style","height","Grid","container","spacing","item","xs","FormControl","minWidth","InputLabel","Select","labelId","id","value","onChange","event","setState","target","map","MenuItem","weeks","align","options","maintainAspectRatio","scales","yAxes","display","position","scaleLabel","labelString","plugins","filler","propagate","ref","refName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebb08b6f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid'\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { Scatter } from 'react-chartjs-2';\n\nimport './App.css';\nimport deaths from './deaths.json'\n\nconst recent_week = 23;\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      jurisdiction: 'United States',\n      hideRecentWeeks: 4,\n      method: 'Mean',\n    }\n  }\n\n  render(){\n    var jurisdictions = Object.keys(deaths).sort();\n    jurisdictions.splice(jurisdictions.indexOf('United States'), 1);\n    jurisdictions.unshift('United States');\n\n    var dataspecs = [\n      {\n        year: 2015,\n        color: '#fabed4',\n        lineWidth: 1,\n      },\n      {\n        year: 2016,\n        color: '#ffd8b1',\n        lineWidth: 1,\n      },\n      {\n        year: 2017,\n        color: '#fffac8',\n        lineWidth: 1,\n      },\n      {\n        year: 2018,\n        color: '#aaffc3',\n        lineWidth: 1,\n      },\n      {\n        year: 2019,\n        color: '#dcbeff',\n        lineWidth: 1,\n      },\n      {\n        year: '2015-2019 ' + this.state.method + ' + COVID-19 Reported',\n        color: '#f58231',\n        lineWidth: 3,\n        dash: [5, 5],\n        recentHideApplies: true,\n      },\n      {\n        year: 2020,\n        color: '#e6194B',\n        lineWidth: 3,\n        recentHideApplies: true,\n        fill: '-1',\n      },\n      {\n        year: 'Pre-2020 ' + this.state.method,\n        color: '#f58231',\n        lineWidth: 3,\n        recentHideApplies: true,\n      },\n    ];\n    var datasets = [];\n    for(var dataspec of dataspecs){\n      var reshape_data = [];\n      for(var week in deaths[this.state.jurisdiction][dataspec.year]['All Deaths']){\n        if(dataspec.recentHideApplies && week > recent_week - this.state.hideRecentWeeks){\n          continue;\n        }\n\n        reshape_data.push({\n          x: week,\n          y: deaths[this.state.jurisdiction][dataspec.year]['All Deaths'][week],\n        });\n      }\n\n      datasets.push({\n        label: dataspec.year,\n        fill: false,\n        showLine: true,\n\n        pointRadius: 0,\n        tension: 0,\n\n        borderColor: dataspec.color,\n        borderWidth: dataspec.lineWidth,\n        borderDash: dataspec.dash,\n\n        hidden: dataspec.hidden,\n\n        //fill: dataspec.fill || false,\n\n        data: reshape_data,\n      });\n    }\n\n    var data = {\n      labels: ['Scatter Data'],\n      datasets: datasets,\n    }\n\n    var options = {\n        maintainAspectRatio: false,\n        scales:{\n            yAxes:[        \n                {\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-0',\n                    scaleLabel:{\n                        display: true,\n                        labelString: 'Deaths'\n                    },\n                },\n            ],\n        },\n        plugins: {\n          filler: {\n              propagate: false,\n          },\n        },\n    }\n\n    return (\n      <Container style={{height: '100vh'}}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <FormControl style={{minWidth: 160}}>\n              <InputLabel>Jurisdiction</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={this.state.jurisdiction}\n                onChange={(event) => {this.setState({jurisdiction: event.target.value})}}\n              >\n                {jurisdictions.map(jurisdiction =>{\n                    return (<MenuItem value={jurisdiction}>{jurisdiction}</MenuItem>);\n                })}\n              </Select>\n            </FormControl>\n            &nbsp;\n            <FormControl style={{minWidth: 160}}>\n              <InputLabel>Estimation Method</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={this.state.method}\n                minWidth={120}\n                onChange={(event) => {this.setState({method: event.target.value})}}\n              >\n                {['Mean','Max'].map(method =>{\n                    return (<MenuItem value={method}>{method}</MenuItem>);\n                })}\n              </Select>\n            </FormControl>\n            &nbsp;\n            <FormControl style={{minWidth: 160}}>\n              <InputLabel>Ignore Recent Weeks</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={this.state.hideRecentWeeks}\n                minWidth={120}\n                onChange={(event) => {this.setState({hideRecentWeeks: event.target.value})}}\n              >\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(weeks =>{\n                    return (<MenuItem value={weeks}>{weeks}</MenuItem>);\n                })}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2} align='center' style={{height: '100%'}}>\n          <Grid item xs={12} style={{height:'80%'}}>\n            <Scatter data={data} options={options} ref={this.refName}/>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}